// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const disableEnrollment = `-- name: DisableEnrollment :exec
UPDATE
  enrollments
SET
  enabled = 0,
  token_update_tally = 0,
  last_seen_at = CURRENT_TIMESTAMP
WHERE
  device_id = ? AND
  enabled = 1
`

func (q *Queries) DisableEnrollment(ctx context.Context, deviceID string) error {
	_, err := q.db.ExecContext(ctx, disableEnrollment, deviceID)
	return err
}

const retrieveMigrationCheckinsDevices = `-- name: RetrieveMigrationCheckinsDevices :many
SELECT authenticate, token_update FROM devices
`

type RetrieveMigrationCheckinsDevicesRow struct {
	Authenticate string
	TokenUpdate  sql.NullString
}

func (q *Queries) RetrieveMigrationCheckinsDevices(ctx context.Context) ([]RetrieveMigrationCheckinsDevicesRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveMigrationCheckinsDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveMigrationCheckinsDevicesRow
	for rows.Next() {
		var i RetrieveMigrationCheckinsDevicesRow
		if err := rows.Scan(&i.Authenticate, &i.TokenUpdate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveMigrationCheckinsUsers = `-- name: RetrieveMigrationCheckinsUsers :many
SELECT token_update FROM users
`

func (q *Queries) RetrieveMigrationCheckinsUsers(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, retrieveMigrationCheckinsUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var token_update sql.NullString
		if err := rows.Scan(&token_update); err != nil {
			return nil, err
		}
		items = append(items, token_update)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveTokenUpdateTally = `-- name: RetrieveTokenUpdateTally :one
SELECT token_update_tally FROM enrollments WHERE id = ?
`

func (q *Queries) RetrieveTokenUpdateTally(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRowContext(ctx, retrieveTokenUpdateTally, id)
	var token_update_tally int32
	err := row.Scan(&token_update_tally)
	return token_update_tally, err
}

const storeBootstrapToken = `-- name: StoreBootstrapToken :exec
UPDATE devices SET bootstrap_token_b64 = ?, bootstrap_token_at = CURRENT_TIMESTAMP WHERE id = ? LIMIT 1
`

type StoreBootstrapTokenParams struct {
	BootstrapTokenB64 sql.NullString
	ID                string
}

func (q *Queries) StoreBootstrapToken(ctx context.Context, arg StoreBootstrapTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeBootstrapToken, arg.BootstrapTokenB64, arg.ID)
	return err
}

const storeDeviceTokenUpdateWithUnlock = `-- name: StoreDeviceTokenUpdateWithUnlock :exec
UPDATE devices
SET
    token_update = ?,
    token_update_at = CURRENT_TIMESTAMP,
    unlock_token = ?,
    unlock_token_at = CURRENT_TIMESTAMP
WHERE id = ? LIMIT 1
`

type StoreDeviceTokenUpdateWithUnlockParams struct {
	TokenUpdate sql.NullString
	UnlockToken sql.NullString
	ID          string
}

func (q *Queries) StoreDeviceTokenUpdateWithUnlock(ctx context.Context, arg StoreDeviceTokenUpdateWithUnlockParams) error {
	_, err := q.db.ExecContext(ctx, storeDeviceTokenUpdateWithUnlock, arg.TokenUpdate, arg.UnlockToken, arg.ID)
	return err
}

const storeDeviceTokenUpdateWithoutUnlock = `-- name: StoreDeviceTokenUpdateWithoutUnlock :exec
UPDATE devices
SET
    token_update = ?,
    token_update_at = CURRENT_TIMESTAMP
WHERE id = ? LIMIT 1
`

type StoreDeviceTokenUpdateWithoutUnlockParams struct {
	TokenUpdate sql.NullString
	ID          string
}

func (q *Queries) StoreDeviceTokenUpdateWithoutUnlock(ctx context.Context, arg StoreDeviceTokenUpdateWithoutUnlockParams) error {
	_, err := q.db.ExecContext(ctx, storeDeviceTokenUpdateWithoutUnlock, arg.TokenUpdate, arg.ID)
	return err
}

const updateLastSeen = `-- name: UpdateLastSeen :exec
UPDATE enrollments SET last_seen_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) UpdateLastSeen(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateLastSeen, id)
	return err
}
